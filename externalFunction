USE ANALYTIC_TOOLS;
 
CREATE OR REPLACE API INTEGRATION apiSagemakerConnector
          API_PROVIDER = aws_api_gateway
          API_AWS_ROLE_ARN = 'arn:aws:iam::304274421518:role/aws_cnn_datsci_dev_snowflake_api_integration'
          API_ALLOWED_PREFIXES = ('https://rgboxz9du6.execute-api.us-east-1.amazonaws.com/test/snowflake_proxy')
          ENABLED = true;

describe INTEGRATION apiSagemakerConnector;

 
CREATE OR REPLACE EXTERNAL FUNCTION minSampleSize(p1 float, p2 float)
    RETURNS int 
    API_INTEGRATION = apiSagemakerConnector
    AS 'https://rgboxz9du6.execute-api.us-east-1.amazonaws.com/test/snowflake_proxy'
    ;
    


SELECT minSampleSize(0.2,0.6);




###########################################################################


CREATE or REPLACE API INTEGRATION apiSagemakerConnector5
    API_PROVIDER = aws_api_gateway
    API_AWS_ROLE_ARN = 'arn:aws:iam::304274421518:role/aws_cnn_datsci_dev_snowflake_api_integration'
    API_ALLOWED_PREFIXES = ('https://rgboxz9du6.execute-api.us-east-1.amazonaws.com/test')
    ENABLED = true;
    
    
describe INTEGRATION apiSagemakerConnector5;



CREATE OR REPLACE EXTERNAL FUNCTION containerAPI()
    RETURNS variant 
    API_INTEGRATION = apiSagemakerConnector5
    AS 'https://rgboxz9du6.execute-api.us-east-1.amazonaws.com/test/snowflake_proxy2'
    ;
   
   
SELECT containerAPI();
   
   
   
   
   
###########################################################################

//CREATE OR REPLACE temporary table x1 AS
//
WITH collection as (
 SELECT containerAPI() AS dat
  ),parse as (
  SELECT parse_json(dat)['10'].change AS A,parse_json(dat)['10'].control AS B FROM collection

  )
SELECT * FROM parse;


###########################################################################


--s3://cnn-di-datsci-crosswalk-crosswalk-dev/KWU/TEST/


create or replace stage my_s3_stage
  url='s3://cnn-di-datsci-crosswalk-crosswalk-dev/KWU/TEST/'
  file_format = (type  = JSON )
  credentials=(aws_key_id='AKIAUNWBLG4HF6A5C6HC' aws_secret_key='K1zmq8oKSLh8tKfoIZO+xTEq9UzuVg8VhufLqV2t');


create or replace stage ANALYTIC_TOOLS.ADVANCED_ANALYTICS_STAGE.my_s3_stage
   url='s3://cnn-di-datsci-crosswalk-crosswalk-dev/KWU/TEST/'
   credentials=(aws_key_id='AKIAUNWBLG4HF6A5C6HC' aws_secret_key='K1zmq8oKSLh8tKfoIZO+xTEq9UzuVg8VhufLqV2t');


ls @my_s3_stage;


SELECT $1 FROM @my_s3_stage/HP_AUDIO_DW_0_0_0.json.gz limit 1;
--{ "EX_GROUP": "variant",    "FEATURE": "pageview",    "FEATURE_TYPE": "continuous",    "VALUE": 52,    "VISITOR_ID": "3495340295866247864_6917536446363330685"  }


select $1:EX_GROUP::string as EX_GROUP from @my_s3_stage/HP_AUDIO_DW_0_0_0.json.gz limit 1;

select 
$1:EX_GROUP::string as EX_GROUP,
$1:FEATURE::string as FEATURE,
$1:FEATURE_TYPE::string as FEATURE_TYPE,
$1:VALUE::number AS VALUE,
$1:VISITOR_ID::string AS VISITOR_ID
from @my_s3_stage/HP_AUDIO_DW_0_0_0.json.gz limit 1;

--01a3a08c-0504-8143-0000-0cad45fa1532

select containerAPI();
select 
$2:EX_GROUP::string as EX_GROUP,
$2:FEATURE::string as FEATURE,
$2:CONTROL::float as CONTROL,
$2:VARIANT::float as VARIANT,
$2:CHANGE::float as CHANGE,
$2:SIGNIFICANT::boolean as SIGNIFICANT,
$2:P_VALUE::float as P_VALUE
from table(result_scan('01a3a08c-0504-8143-0000-0cad45fa1532'));



select $1 from table(result_scan('01a3a08c-0504-8143-0000-0cad45fa1532'));




"ANALYTIC_TOOLS"."ADVANCED_ANALYTICS_STAGE"."mycsvtable"



################################################

create or replace table json_testing(jsoncolumntesting variant);

create or replace file format json_format
type = 'json';

create or replace stage ANALYTIC_TOOLS.ADVANCED_ANALYTICS_STAGE.my_s3_stage
   url='s3://cnn-di-datsci-crosswalk-crosswalk-dev/KWU/TEST/'
   credentials=(aws_key_id='AKIAUNWBLG4HF6A5C6HC' aws_secret_key='K1zmq8oKSLh8tKfoIZO+xTEq9UzuVg8VhufLqV2t')
   file_format = json_format;
   

copy into json_testing from @my_s3_stage;

select * from json_testing


select JSONCOLUMNTESTING: "EX_GROUP" from json_testing;

################################################

select parse_json(JSONCOLUMNTESTING) FROM json_testing;

select parse_json(JSONCOLUMNTESTING):"VALUE"::FLOAT FROM json_testing;
select parse_json(JSONCOLUMNTESTING):"EX_GROUP"::STRING FROM json_testing;
select parse_json(JSONCOLUMNTESTING):"FEATURE"::STRING FROM json_testing;
select parse_json(JSONCOLUMNTESTING):"FEATURE_TYPE"::STRING FROM json_testing;
select parse_json(JSONCOLUMNTESTING):"VISITOR_ID"::STRING FROM json_testing;




select * FROM json_testing as S, table(flatten(S.$1,'')) t;




